.chapter(data-title='Nim Tuto')
  .step(data-file='src/hello.nim', data-highlight='1', data-title='Hello World')
    :markdown
      # ES

      Bienvenidas al Tutorial de [Nim](https://nim-lang.org)!.

      Este es un tutorial HTML bilingue autoguiado paso-a-paso para aprender a programar en Nim.

      Como todo tutorial empieza con un "Hola Mundo",
      puedes ejecutar el codigo para mostrar el mensaje `"Hello World"` en la terminal.

      - Clickea la flecha derecha para avanzar.
      - Clickea la flecha izquierda para retroceder.
      - Clickea la hamburguesa para mostrar el Menu.

      ---

      # EN

      Welcome to the [Nim](https://nim-lang.org) Tutorial!.

      This is a self-guided step-by-step bilingual HTML tutorial to learn Nim programming.

      Like all tutorials it starts with a "Hello World",
      you can execute the code to show the message `"Hello World"` on the terminal.

      - Click the right arrow to advance.
      - Click the left arrow to go backwards.
      - Click the Hamburguer to show the Menu.




  .step(data-file='src/assign_variable.nim', data-title='Variables')
    :markdown
      # ES

      Puedes controlar la Inmutabilidad de las variables usando `var`, `let` y `const`.

      - `var` Mutable.
      - `let` Inmutable.
      - `const` Inmutable (Evaluado en tiempo de compilacion).

      *Si se te complica podes usar `var` en todos lados!.*

      ---

      # EN

      You can control the immutability of variables using `var`, `let` and `const`.

      - `var` Mutable.
      - `let` Inmutable.
      - `const` Inmutable (Evaluated at compile time).

      *If you get complicated you can use `var` everywhere!.*




  .step(data-file='src/comments.nim', data-title='Comments')
    :markdown
      # ES

      Comentarios de codigo empiezan con `#` o `##`.

      - `#` Comentario, Ignorado por Nim.
      - `##` Comentario DocString, usado para generar Auto-Documentacion.

      Los Comentarios DocString pueden ser agregados en cualquier lado en el codigo.

      Los Comentarios DocString seran parseados como [ReStructuredText](https://es.wikipedia.org/wiki/ReStructuredText) o Texto plano.

      ---

      # EN

      Code comments start with `#` or `##`.

      - `#` Comment, Ignored by Nim.
      - `##` DocString Comment, used for Self-Documentation.

      The DocString Comments can be added anywhere on the code.

      The DocString Comments will be parsed as [ReStructuredText](https://en.wikipedia.org/wiki/ReStructuredText) or plain Text.




  .step(data-file='src/basic_types_boolean.nim', data-title='Boolean')
    :markdown
      # ES

      Tipo Booleano, representa verdadero o falso.

      - `true` Verdadero.
      - `false` Falso.
      - `bool()` se usa para evaluar un argumento a Booleano.

      ---

      # EN

      Boolean type, represents true or false.

      - `true` True.
      - `false` False.
      - `bool()` used to evaluate an argument to a Boolean.




  .step(data-file='src/basic_types_string.nim', data-title='String & Char')
    :markdown
      # ES

      ##### String

      Tipo String, representa una cadena de caracteres de texto.

      Puede soportar Unicode, UTF-8, Emoji, y otros caracteres raros.

      - `""` es el constructor del tipo `string`.

      ##### Char

      Tipo Char, representa un caracter de texto, solo 1.

      Puede soportar ASCII solamente, no puede estar vacio.

      Internamente `char` esta optimizado a un numero entero, por lo que es muy rapido y liviano.

      - `' '` es el constructor del tipo `char`.

      ---

      # EN

      ##### String

      String type, represents a sequence of text characters.

      It can support Unicode, UTF-8, Emoji, and other weird characters.

      - `""` is the constructor of the `string` type.

      ##### Char

      Char type, represents one text character, just 1.

      It can support ASCII only, it can not be empty.

      Internally `char` its optimized to an integer number, so its fast and lightweight.

      - `' '` its the constructor of the `char` type.




  .step(data-file='src/basic_types_integers.nim', data-title='Integers')
    :markdown
      # ES

      Tipo Entero, representa un numero entero, positivo o negativo.

      Existen varias medidas de enteros y una medida de entero por defecto,
      dependiendo de cuantos bits se usa para representarlos internamente,
      los enteros chicos usan menos menos recursos y son mas rapidos,
      los enteros grandes pueden acomodar numeros mucho mas grandes.

      - Literal siempre genera un `int`.
      - `int` es `int64` en CPU de 64bits, es `int32` en CPU de 32bits.
      - `int8` desde `-128` hasta `127`.
      - `int16` desde `-32768` hasta `32767`.
      - `int32` desde `-2147483648` hasta `2147483647`.
      - `int64` desde `-9223372036854775808` hasta `9223372036854775807`.

      *Si se te complica, podes usar `int` para todo!.*

      ---

      # EN

      Integer type, represents an integer number, positive o negative.

      Theres multiple sizes of integers and one default integer size,
      they depend on how many it they use to be represented internally,
      the smaller integers use less resources and they are faster,
      the bigger integer can hold bigger integer numbers.

      - Literals always generate an `int`.
      - `int` is `int64` on 64bits CPU, `int32` on 32bits CPU.
      - `int8` from `-128` to `127`.
      - `int16` from `-32768` to `32767`.
      - `int32` from `-2147483648` to `2147483647`.
      - `int64` from `-9223372036854775808` to `9223372036854775807`.

      *If you get complicated, you can use `int` for everything!.*




  .step(data-file='src/basic_types_floats.nim', data-title='Floats')
    :markdown
      # ES

      Tipo Flotante, representa un numero de punto flotante, positivo o negativo.

      Existen 2 medidas de flotantes y una medida de flotante por defecto,
      dependiendo de cuantos bits se usa para representarlos internamente,
      el flotante chico usa menos recursos y es mas rapido,
      el flotante grande pueden acomodar numeros mucho mas grandes.

      - Literal siempre genera un `float`.
      - `float` es `float64`.

      *Si se te complica, podes usar `float` para todo!.*

      ---

      # EN

      Float type, represents an floating point number, positive o negative.

      Theres 2 sizes of floats  and one default float size,
      they depend on how many bits they use to be represented internally,
      the smaller float use less resources and is faster,
      the bigger float can hold bigger floating point numbers.

      - Literals always generate an `float`.
      - `float` is `float64`.

      *If you get complicated, you can use `float` for everything!.*











  .step(data-title='End')
    :markdown
      ## This is the beginning, is not the end...



      ### Links

      - [Nim Homepage](https://nim-lang.org).
      - [Nimble](https://nimble.directory).
      - [Nim Twitter (EN)](https://twitter.com/nim_lang).
      - [Nim Twitter (ES)](https://twitter.com/nim_ar).
      - [Nim Telegram (EN)](https://t.me/nim_lang).
      - [Nim Telegram (ES)](https://t.me/NimArgentina).
      - [Nim Telegram StickerPack](https://t.me/addstickers/nimlang).
      - [Nim GitHub](https://github.com/nim-lang).
      - [Nim Forum](https://forum.nim-lang.org).
      - [Nim StackOverflow](https://stackoverflow.com/questions/tagged/nim).
      - [Nim DevDocs](http://devdocs.io/nim).
      - [Nim Rosetta](http://rosettacode.org/wiki/Category:Nim).
      - [Awesome Nim](https://github.com/VPashkov/awesome-nim).
      - [Nim Tuto](https://github.com/juancarlospaco/nim-tuto#nim-tuto).

      [Creative Commons Attribution-NonCommercial-ShareAlike CC-BY-NC-SA 4.0+](https://creativecommons.org/licenses/by-nc-sa/4.0/)
